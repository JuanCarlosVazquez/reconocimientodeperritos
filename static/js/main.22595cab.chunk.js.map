{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","reducer","state","event","formatResult","className","probability","toFixed","App","useReducer","statito","dispatch","useState","model","setModel","results","setResults","imageRef","useRef","inputRef","imageURL","setImageURL","identify","a","classify","current","clasificationresults","reset","actionButton","action","mobilenet","text","click","src","alt","ref","map","type","accept","capture","onChange","target","files","length","url","URL","createObjectURL","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAMMA,G,MAAU,CACdC,QAAS,UACTC,OAAQ,CACND,QAAS,CAAEE,GAAI,CAAEC,KAAM,iBACvBC,aAAc,CAAEF,GAAI,CAAEC,KAAM,eAC5BE,WAAY,CAAEH,GAAI,CAAEC,KAAM,eAC1BG,WAAY,CAAEJ,GAAI,CAAEC,KAAM,eAAiBI,WAAW,GACtDC,YAAa,CAAEN,GAAI,CAAEC,KAAM,aAC3BM,SAAU,CAAEP,GAAI,CAAEC,KAAM,cAAgBI,WAAW,EAAMG,aAAa,MAIpEC,EAAU,SAACC,EAAOC,GAAR,OAAkBd,EAAQE,OAAOW,GAAOV,GAAGW,IAAUd,EAAQC,SAEvEc,EAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,YAAb,OACnB,sCACSD,EADT,eACwC,IAAdC,GAAmBC,QAAQ,MAyFxCC,MAlFf,WAAgB,IAAD,EAEeC,qBAAWR,EAASZ,EAAQC,SAF3C,mBAENoB,EAFM,KAEGC,EAFH,OAGaC,mBAAS,MAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAIiBF,mBAAS,IAJ1B,mBAING,EAJM,KAIGC,EAJH,KAKPC,EAAWC,mBACXC,EAAWD,mBANJ,EAOmBN,mBAAS,MAP5B,mBAONQ,EAPM,KAOIC,EAPJ,KASP5B,EAAO,kBAAMkB,EAAS,SAGtBW,EAAQ,uCAAG,4BAAAC,EAAA,6DACf9B,IADe,SAEoBoB,EAAMW,SAASP,EAASQ,SAF5C,OAETC,EAFS,OAGfV,EAAWU,GACXjC,IAJe,2CAAH,qDAMRkC,EAAK,uCAAG,sBAAAJ,EAAA,sDACZP,EAAW,IACXK,EAAY,MACZ5B,IAHY,2CAAH,qDAaLmC,EAAe,CACnBtC,QAAS,CAAEuC,OATE,uCAAG,4BAAAN,EAAA,6DAChB9B,IADgB,SAEIqC,MAFJ,OAEVjB,EAFU,OAGhBC,EAASD,GACTpB,IAJgB,2CAAH,qDASiBsC,KAAM,cACpCrC,aAAc,CAAEqC,KAAM,oBACtBpC,WAAY,CAAGoC,KAAM,eAAgBF,OAAQ,kBAAMV,EAASM,QAAQO,UACpEpC,WAAY,CAAEmC,KAAM,iBAAkBF,OAAQP,GAC9CxB,YAAa,CAAEiC,KAAM,kBACrBhC,SAAU,CAAEgC,KAAM,QAASF,OAAQF,IArCxB,EAyCsCtC,EAAQE,OAAOmB,GAzCrD,IAyCLb,iBAzCK,aAyCcG,mBAzCd,SAqDb,OACE,6BAIGH,GAAa,yBAAKoC,IAAKb,EAAUc,IAAI,iBAAiBC,IAAKlB,IAC3DjB,GAAc,4BACZe,EAAQqB,IAAIhC,IAKf,2BACMiC,KAAK,OACLC,OAAO,UACPC,QAAQ,SACRC,SA1BW,SAAArC,GAEnB,GADkBA,EAAMsC,OAAhBC,MACEC,OAAS,EAAG,CACpB,IAAMC,EAAMC,IAAIC,gBAAgB3C,EAAMsC,OAAOC,MAAM,IACnDrB,EAAYuB,GACZnD,MAsBM0C,IAAKhB,IAGX,4BAAQ4B,QAAUnB,EAAalB,GAASmB,QACjCD,EAAalB,GAASqB,QC3FfiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.22595cab.chunk.js","sourcesContent":["\r\nimport React, { useState, useRef, useReducer } from \"react\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\r\nimport './App.css';\r\n\r\nconst machine = {\r\n  initial: \"initial\",\r\n  states: {\r\n    initial: { on: { next: \"loadingModel\" } },\r\n    loadingModel: { on: { next: \"modelReady\" } },\r\n    modelReady: { on: { next: \"imageReady\" } },\r\n    imageReady: { on: { next: \"identifying\" }, showImage: true },\r\n    identifying: { on: { next: \"complete\" } },\r\n    complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\r\n  }\r\n};\r\n\r\nconst reducer = (state, event) => machine.states[state].on[event] || machine.initial;\r\n\r\nconst formatResult = ({className, probability }) => (\r\n  <li >\r\n      { `${className}: %${ (probability * 100).toFixed(2)  }` }\r\n  </li>\r\n\r\n);\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [statito, dispatch] = useReducer(reducer, machine.initial);\r\n  const [model, setModel] = useState(null);\r\n  const [results, setResults] = useState([]);\r\n  const imageRef = useRef();\r\n  const inputRef = useRef();\r\n  const [imageURL, setImageURL] = useState(null);\r\n\r\n  const next = () => dispatch('next');\r\n\r\n\r\n  const identify = async () => {\r\n    next();\r\n    const clasificationresults = await model.classify(imageRef.current);\r\n    setResults(clasificationresults);\r\n    next();\r\n  };\r\n  const reset = async () => {\r\n    setResults([]);\r\n    setImageURL(null);\r\n    next();\r\n  };\r\n  const loadModel = async () => {\r\n    next();\r\n    const model = await mobilenet.load();\r\n    setModel(model);\r\n    next();\r\n  };\r\n   \r\n  //const upload = () => inputRef.current.click();\r\n  const actionButton = {\r\n    initial: { action: loadModel, text: \"Load Model\" },\r\n    loadingModel: { text: \"Loading Model...\" },\r\n    modelReady: {  text: \"Upload Image\", action: () => inputRef.current.click() },\r\n    imageReady: { text: \"Identify Breed\", action: identify },\r\n    identifying: { text: \"Identifying...\" },\r\n    complete: { text: \"Reset\", action: reset },\r\n  };\r\n\r\n  \r\n  const { showImage = false, showResults = false } = machine.states[statito];\r\n\r\n  const handleUpload = event => {\r\n    const { files } = event.target;\r\n    if (files.length > 0) {\r\n      const url = URL.createObjectURL(event.target.files[0]);\r\n      setImageURL(url);\r\n      next();\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <div >\r\n\r\n\r\n\r\n      {showImage && <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />}   \r\n      {showResults &&<ul>\r\n        {results.map(formatResult)}\r\n\r\n      </ul>}\r\n\r\n\r\n      <input\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            capture=\"camera\"\r\n            onChange={handleUpload}\r\n            ref={inputRef}\r\n      />\r\n\r\n      <button onClick={ actionButton[statito].action}> \r\n            {actionButton[statito].text}    \r\n      </button>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}